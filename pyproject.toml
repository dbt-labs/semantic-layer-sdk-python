[build-system]
requires = ["hatchling~=1.24.0", "hatch-requirements-txt>=0.4.1,<0.5.0"]
build-backend = "hatchling.build"

[project]
name = "dbt-sl-sdk"
description = "A client for dbt's Semantic Layer"
authors = [
  {name = "dbt Labs"}
]
readme = "README.md"
requires-python = ">=3.9"
dynamic = [
  "dependencies", 
  "version",
  "optional-dependencies"
]

[tool.hatch.metadata.hooks.requirements_txt]
files = [
  "deps/common.txt",
]

[tool.hatch.metadata.hooks.requirements_txt.optional-dependencies]
async = [
  "deps/async.txt"
]
sync = [
  "deps/sync.txt"
]
dev-main = [
  "deps/dev.txt",
]
dev-test = [
  "deps/test.txt"
]

[tool.hatch.build]
packages = ["dbtsl"]

[tool.hatch.version]
path = "dbtsl/__about__.py"

[tool.hatch.envs.default.scripts]
"lock" = "bash scripts/lock-deps.sh"
"bump-version" = "bash scripts/bump-version.sh"

[tool.hatch.envs.sync]
features = [
  "sync",
]

[tool.hatch.envs.async]
features = [
  "async",
]

[tool.hatch.envs.dev]
features = [
  "async",
  "sync",
  "dev-main",
  "dev-test"
]
[tool.hatch.envs.dev.scripts]
fetch-schema = "python scripts/fetch_schema.py > tests/server_schema.gql"

[tool.hatch.envs.test]
features = [
  "async",
  "sync",
  "dev-test"
]
[tool.hatch.envs.test.scripts]
run = "pytest --server-schema tests/server_schema.gql"
[[tool.hatch.envs.test.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.pypi-test-sync]
dependencies = [
  "dbt-sl-sdk[sync]"
]
[tool.hatch.envs.pypi-test-sync.env-vars]
PIP_INDEX_URL = "https://test.pypi.org/simple/"
PIP_EXTRA_INDEX_URL = "https://pypi.org/simple/"

[tool.hatch.envs.pypi-test-async]
dependencies = [
  "dbt-sl-sdk[async]"
]
[tool.hatch.envs.pypi-test-async.env-vars]
PIP_INDEX_URL = "https://test.pypi.org/simple/"
PIP_EXTRA_INDEX_URL = "https://pypi.org/simple/"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.pyright]
# TODO: we'd love to enable "strict" typechecking, but 
# pyarrow not having type stubs makes that really hard
typeCheckingMode = "standard"
venv = ".venv/"

[tool.black]
line-length = 120
target-version = ["py39"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
  "E",   # Pycodestyle
  "F",   # Pyflakes
  "W",   # Whitespace
  "D",   # Pydocs
  "T20", # Print statements
  "I",   # isort
]
ignore = [
  # Missing docstring in public module -- often docs handled within classes
  "D100",
  # Missing docstring in public package -- often docs handled within files not __init__.py
  "D104",
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM",
    "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF",
    "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"
]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["dbtsl"]

[tool.ruff.lint.per-file-ignores]
# Ignore docs for test files
"*_test.py" = ["D103"]
"tests/**" = ["D103"]

# Ignore prints in examples
"examples/**" = ["T201", "D103"]
